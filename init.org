#+title: init.org
#+startup: overview
#+property: header-args :tangle init.el :noweb yes :lexical no

* Bootstrap
** 設定ファイルのヘッダー
*** early-init.el
#+begin_src emacs-lisp :tangle early-init.el
;;; -*- lexical-binding: t -*-
;;; early-init.el
#+end_src
*** init.el
#+begin_src emacs-lisp
;;; -*- lexical-binding: t -*-
;;; init.el
#+end_src
** early-init.el
*** 起動時間短縮のための設定
#+begin_src emacs-lisp :tangle early-init.el
(defvar default-file-name-handler-alist file-name-handler-alist)
(setq file-name-handler-alist nil)
(setq gc-cons-percentage 1.0)
(setq gc-cons-threshold most-positive-fixnum)

(defun e:emacs-startup-config ()
  (setq file-name-handler-alist default-file-name-handler-alist)
  (setq gc-cons-percentage 0.1)
  (setq gc-cons-threshold 10485760))
(add-hook 'emacs-startup-hook #'e:emacs-startup-config)
#+end_src
*** 不要なUI要素を非表示
#+begin_src emacs-lisp :tangle early-init.el
(menu-bar-mode   -1)
(scroll-bar-mode -1)
(tool-bar-mode   -1)
(tooltip-mode    -1)
#+end_src
*** ディレクトリ設定
#+begin_src emacs-lisp
(setq user-emacs-directory (file-name-directory (or load-file-name buffer-file-name)))
(defvar no-littering-etc-directory (expand-file-name "etc/" user-emacs-directory))
(defvar no-littering-var-directory (expand-file-name "var/" user-emacs-directory))
#+end_src
*** `package.el' を使用しない
#+begin_src emacs-lisp :tangle early-init.el
(setq package-enable-at-startup nil)
#+end_src
*** 未ロードならロードする
#+begin_src emacs-lisp
(unless early-init-file
  (load (expand-file-name "early-init" user-emacs-directory)))
#+end_src
** 起動時間の計測
#+begin_src emacs-lisp
(when init-file-debug
  (require 'profiler)
  (profiler-start 'cpu))
#+end_src
** パッケージ管理
#+begin_src emacs-lisp
(add-to-list 'load-path (expand-file-name "lib/borg" user-emacs-directory))
(require 'borg)
(borg-initialize)
#+end_src
** マクロ定義
#+begin_src emacs-lisp
(require 'nsmacs-macros)
#+end_src
** ライブラリ
#+begin_src emacs-lisp
(require 'komunan-lisp-library)
(require 'f)
(require 's)
(require 'ht)
(require 'leaf)
(require 'general)
(require 'bind-map)
(require 'hercules)
(require 'no-littering)
#+end_src
** 環境設定
*** Theme
#+begin_src emacs-lisp
(require-theme 'modus-themes)
(load-theme 'modus-vivendi-tinted :no-confirm)
#+end_src
*** Font
#+begin_src emacs-lisp
(let ((font "UDEV Gothic NF")
      (size (if (eq system-type 'darwin) 16.0 12.0)))
  (set-frame-font (font-spec :name font :size size) nil t)
  (set-face-attribute 'fixed-pitch       nil :family font)
  (set-face-attribute 'fixed-pitch-serif nil :family font)
  (set-face-attribute 'variable-pitch    nil :family font))
#+end_src
*** Japanese
#+begin_src emacs-lisp
(set-language-environment "Japanese")
#+end_src
*** Encoding
#+begin_src emacs-lisp
(let ((coding-system 'utf-8))
  (prefer-coding-system          coding-system)
  (set-buffer-file-coding-system coding-system))
#+end_src
*** Locale
#+begin_src emacs-lisp
(let ((value "ja_JP.UTF-8"))
  (setenv "LANG" value)
  (setenv "LC_ALL" value))
#+end_src
*** NixOS
#+begin_src emacs-lisp
(if (--find (s-match "^/nix/.+?/jinx" it) load-path)
    (setopt load-path (--reject (s-match "lib/jinx$" it) load-path)))
#+end_src
*** Mac
#+begin_src emacs-lisp
(e:if! (eq system-type 'darwin)
  ;; タイトルバーの見た目を変更
  ;; (--each '((ns-transparent-titlebar . t)
  ;;           (ns-appearance . dark))
  ;;   (assq-delete-all (car it) initial-frame-alist)
  ;;   (assq-delete-all (car it) default-frame-alist)
  ;;   (add-to-list 'initial-frame-alist it)
  ;;   (add-to-list 'default-frame-alist it))
  ;; 特殊キーの設定
  (setopt ns-command-modifier 'meta)
  (setopt ns-right-command-modifier 'super)
  (setopt ns-alternate-modifier 'none)
  ;; ちょっと行間を広げる
  (e:default! line-spacing 2))
#+end_src
* Config: Emacs
** startup
#+begin_src emacs-lisp
(setopt inhibit-startup-buffer-menu t)
(setopt inhibit-startup-screen t)
(setopt initial-scratch-message nil)
#+end_src
** Alias
#+begin_src emacs-lisp
(defalias 'exit 'save-buffers-kill-terminal)
#+end_src
** C Sources
#+begin_src emacs-lisp
(e:default! bidi-display-reordering nil)
(e:default! cursor-in-non-selected-windows nil)
(e:default! fill-column 100)
(e:default! truncate-lines t)
(setopt create-lockfiles nil)
(setopt delete-by-moving-to-trash nil)
(setopt enable-recursive-minibuffers t)
(setopt frame-resize-pixelwise t)
(setopt history-delete-duplicates t)
(setopt inhibit-x-resources t)
(setopt read-process-output-max 1048576)
(setopt ring-bell-function #'ignore)
(setopt scroll-conservatively 101)
(setopt scroll-margin 5)
(setopt scroll-preserve-screen-position t)
(setopt shell-file-name
        (or (executable-find "zsh")
            (executable-find "bash")
            (executable-find "sh")))
(setopt system-time-locale "C")
(setopt truncate-partial-width-windows nil)
(setopt undo-limit 67108864)         ;; => 64mb.
(setopt undo-strong-limit 100663296) ;; => 96mb.
(setopt undo-outer-limit 1006632960) ;; => 960mb.
(setopt use-dialog-box nil)
(setopt use-file-dialog nil)
(setopt use-short-answers t)
(setopt window-resize-pixelwise t)
#+end_src
** auth-source
#+begin_src emacs-lisp
(e:deferred-config! auth-source
  :config
  (setopt auth-sources '("~/.authinfo.json.gpg" "~/.netrc.gpg")))
#+end_src
** auto-revert
#+begin_src emacs-lisp
(e:deferred-config! auto-revert
  :config
  (global-auto-revert-mode 1))
#+end_src
** browse-url
#+begin_src emacs-lisp
(e:deferred-config! browse-url
  :commands (browse-url-by-choosen)
  :defun (browse-url-default-browser)
  :defvar (browse-url-generic-program)
  :defer-config
  (setopt browse-url-browser-function 'browse-url-by-choosen)
  (defun browse-url-by-choosen (url &optional new-window)
    "選択したブラウザで URL を開く."
    (let ((browsers '(eww-browse-url browse-url-default-browser xwidget-webkit-browse-url)))
      (when browse-url-generic-program
        (push 'browse-url-generic browsers))
      (and (fboundp 'pr-review-url-parse)
           (pr-review-url-parse url)
           (push 'pr-review-open-url browsers))
      (funcall (intern (completing-read "Choose Browser: " browsers)) url new-window))))
#+end_src
** comp
#+begin_src emacs-lisp
(e:deferred-config! comp
  :defer-config
  (setopt native-comp-async-report-warnings-errors nil))
#+end_src
** compile
#+begin_src emacs-lisp
(e:deferred-config! compile
  :defer-config
  (setopt compilation-scroll-output t))
#+end_src
** cus-edit
#+begin_src emacs-lisp
(e:deferred-config! cus-edit
  :defer-config
  (e:var! custom-file "custom.el"))
#+end_src
** dired
*** dired
#+begin_src emacs-lisp
(e:deferred-config! dired
  :defer-config
  (setopt dired-auto-revert-buffer t)
  (setopt dired-dwim-target t)
  (setopt dired-listing-switches "-Ahl")
  (setopt dired-omit-files (rx (or (seq bol (? ".") "#")
                                        (seq bol (or "." "..") eol)
                                        (seq bol ".DS_Store" eol))))
  (setopt dired-recursive-copies 'always)
  (setopt dired-recursive-deletes 'always))
#+end_src
*** dired-filter
#+begin_src emacs-lisp
(e:deferred-config! dired-filter
  :hook (dired-mode-hook . dired-filter-mode))
#+end_src
*** ls-lisp-extension
#+begin_src emacs-lisp
(e:deferred-config! ls-lisp-extension
  :after (dired)
  :config
  (setopt ls-lisp-dirs-first t)
  (setopt ls-lisp-format-time-list '("%Y-%m-%d %H:%M:%S" "%Y-%m-%d %H:%M:%S"))
  (setopt ls-lisp-ignore-case nil)
  (setopt ls-lisp-use-insert-directory-program nil)
  (setopt ls-lisp-use-localized-time-format t)
  (setopt ls-lisp-verbosity '(uid gid))
  (ls-lisp-extension-on))
#+end_src
** display-line-numbers
#+begin_src emacs-lisp
(e:deferred-config! display-line-numbers
  :hook ((find-file-hook . display-line-numbers-mode-on)
         (prog-mode-hook . display-line-numbers-mode-on))
  :defer-config
  (e:default! display-line-numbers-width 4)
  (e:define-minor-mode-switch display-line-numbers-mode))
#+end_src
** ediff
#+begin_src emacs-lisp
(e:deferred-config! ediff
  :commands (ediff-setup-windows-plain)
  :defer-config
  (setopt ediff-window-setup-function #'ediff-setup-windows-plain))
#+end_src
** emacs-lock
#+begin_src emacs-lisp
(e:deferred-config! emacs-lock
  :config
  (dolist (buffer '("*scratch*" "*Messages*"))
    (with-current-buffer buffer
      (emacs-lock-mode 'kill))))
#+end_src
** epg-config
#+begin_src emacs-lisp
(e:deferred-config! epg-config
  :defer-config
  (setopt epg-pinentry-mode 'loopback))
#+end_src
** eww
#+begin_src emacs-lisp
(e:deferred-config! eww
  :defun (eww-current-url)
  :defer-config
  (general-def eww-mode-map
    "e" 'eww-open-current-url-with-default-browser)
  ;; (setopt eww-search-prefix "https://www.google.com/search?q=")
  (defun eww-open-current-url-with-default-browser ()
    (interactive)
    (browse-url-default-browser (eww-current-url))))
#+end_src
** files
#+begin_src emacs-lisp
(e:deferred-config! files
  :defer-config
  (setopt auto-save-default nil)
  (setopt make-backup-files nil)
  (setopt mode-require-final-newline nil)
  (setopt require-final-newline nil))
#+end_src
** frame
#+begin_src emacs-lisp
(e:deferred-config! frame
  :defer-config
  (blink-cursor-mode 0))
#+end_src
** google-translate
#+begin_src emacs-lisp
(e:deferred-config! google-translate
  :config
  (setopt google-translate-default-source-language "en")
  (setopt google-translate-default-target-language "ja"))
#+end_src
** hl-line
#+begin_src emacs-lisp
(e:deferred-config! hl-line
  :hook ((prog-mode-hook . hl-line-mode-on))
  :config
  (e:define-minor-mode-switch hl-line-mode))
#+end_src
** indent
#+begin_src emacs-lisp
(e:deferred-config! indent
  :defer-config
  (setopt standard-indent 2))
#+end_src
** novice
#+begin_src emacs-lisp
(e:deferred-config! novice
  :config
  (setopt disabled-command-function nil))
#+end_src
** recentf
#+begin_src emacs-lisp
(e:deferred-config! recentf
  :advice (:before recentf-save-list ad:recentf-save-list@cleanup)
  :defun (recentf-include-p)
  :defvar (recentf-list)
  :init
  (setopt recentf-auto-cleanup 300)
  (setopt recentf-filename-handlers '(abbreviate-file-name))
  (setopt recentf-max-menu-items 20)
  (setopt recentf-max-saved-items 3000)
  (defun ad:recentf-save-list@cleanup (&rest _)
    "存在しないファイルを履歴から削除する"
    (setq recentf-list (->> recentf-list
                            (-map 'f-short)
                            (-distinct)
                            (--filter (and (or (file-remote-p it)
                                               (f-exists? it))
                                           (recentf-include-p it))))))
  (recentf-mode 1))
#+end_src
** savehist
#+begin_src emacs-lisp
(e:deferred-config! savehist
  :config
  (savehist-mode 1))
#+end_src
** saveplace
#+begin_src emacs-lisp
(e:deferred-config! save-place
  :config
  (save-place-mode 1))
#+end_src
** simple
#+begin_src emacs-lisp
(e:deferred-config! simple
  :defer-config
  (e:default! indent-tabs-mode nil)
  (setopt set-mark-command-repeat-pop t)
  (column-number-mode 1))
#+end_src
** so-long
#+begin_src emacs-lisp
(e:deferred-config! so-long
  :config
  (global-so-long-mode 1))
#+end_src
** tab-bar-mode
#+begin_src emacs-lisp
(e:deferred-config! tab-bar
  :config
  (tab-bar-mode t))
#+end_src
** timer
#+begin_src emacs-lisp
(e:deferred-config! timer
  :advice (:around cancel-timer ad:cancel-timer@workaround)
  :defer-config
  (defun ad:cancel-timer@workaround (fn &rest args)
    (when (timerp (car args))
      (apply fn args))))
#+end_src
** vc-hooks
#+begin_src emacs-lisp
(e:deferred-config! vc-hooks
  :defer-config
  (setopt vc-follow-symlinks t))
#+end_src
** whitespace
#+begin_src emacs-lisp
(e:deferred-config! whitespace
  :hook ((find-file-hook . whitespace-mode-on)
         (prog-mode-hook . whitespace-mode-on))
  :defer-config
  (setopt whitespace-style '(face
                             trailing
                             tabs
                             tab-mark
                             spaces
                             space-mark
                             newline
                             newline-mark))
  (setopt whitespace-space-regexp "\\(\u3000+\\)")
  (setopt whitespace-display-mappings '((space-mark   ?\u3000 [?\u30ed])
                                        (tab-mark     ?\t     [?\t])
                                        (newline-mark ?\n     [?\u0024 ?\n])))
  (let ((color "#595D63"))
    (set-face-attribute 'whitespace-trailing nil :background "#800000")
    (set-face-attribute 'whitespace-tab      nil :foreground color :strike-through t)
    (set-face-attribute 'whitespace-space    nil :foreground color)
    (set-face-attribute 'whitespace-newline  nil :foreground color))
  (e:define-minor-mode-switch whitespace-mode))
#+end_src
** winner
#+begin_src emacs-lisp
(e:deferred-config! winner
  :config
  (winner-mode 1))
#+end_src
** 個人設定
#+begin_src emacs-lisp
(add-hook 'emacs-startup-hook
          (defun e:load-private-config ()
            (let ((private-config (f-expand "private/config" user-emacs-directory)))
              (condition-case err
                  (load private-config)
                (display-warning :warning err)))))
#+end_src
* Config: Evil
** evil
#+begin_src emacs-lisp
(e:deferred-config! evil
  :priority :high
  :defun (evil-get-auxiliary-keymap
          evil-half-cursor
          evil-normalize-keymaps
          evil-set-command-property)
  :init
  (setopt evil-cross-lines t)
  (setopt evil-disable-insert-state-bindings t)
  (setopt evil-move-beyond-eol t)
  (setopt evil-move-cursor-back nil)
  (setopt evil-shift-width 2)
  (setopt evil-want-Y-yank-to-eol t)
  (setopt evil-want-keybinding nil)
  ;; cursor colors
  (setopt evil-motion-state-cursor  '("plum3" box))
  (setopt evil-normal-state-cursor  '("DarkGoldenrod2" box))
  (setopt evil-visual-state-cursor  '("gray" (hbar . 2)))
  (setopt evil-insert-state-cursor  '("chartreuse3" (bar . 2)))
  (setopt evil-replace-state-cursor '("chocolate" (hbar . 2)))
  (setopt evil-emacs-state-cursor   '("SkyBlue2" box))
  (setopt evil-operator-state-cursor #'evil-half-cursor)
  (evil-mode 1)
  :config
  (general-def 'motion
    "TAB" nil
    "C-\\" 'ignore
    "C-^" nil)
  (general-def 'normal
    "<down>" 'evil-next-visual-line
    "<up>"   'evil-previous-visual-line
    "M-h" 'evil-window-left
    "M-j" 'evil-window-down
    "M-k" 'evil-window-up
    "M-l" 'evil-window-right
    "j" 'evil-next-visual-line
    "k" 'evil-previous-visual-line)
  (general-def 'visual
    "<" 'evil-shift-left-visual
    ">" 'evil-shift-right-visual)
  (general-def 'insert
    "C-z" nil))
#+end_src
** evil-collection
#+begin_src emacs-lisp
(e:deferred-config! evil-collection
  :after (evil)
  :config
  (evil-collection-init))
#+end_src
** evil-args
#+begin_src emacs-lisp
(e:deferred-config! evil-args
  :config
  (general-def evil-inner-text-objects-map "a" 'evil-inner-arg)
  (general-def evil-outer-text-objects-map "a" 'evil-outer-arg))
#+end_src
** evil-easymotion
#+begin_src emacs-lisp
(e:deferred-config! evil-easymotion
  :after (evil)
  :defvar (evilem-map)
  :config
  (evilem-default-keybindings "s")
  (general-def evilem-map
    "s" 'evil-avy-goto-char-timer)
  (general-def 'normal "s" evilem-map)
  (general-def 'visual "x" evilem-map))
#+end_src
** evil-goggles
#+begin_src emacs-lisp
(e:deferred-config! evil-goggles
  :after (evil)
  :config
  (evil-goggles-mode 1))
#+end_src
** evil-lion
#+begin_src emacs-lisp
(e:deferred-config! evil-lion
  :after (evil)
  :config
  (evil-lion-mode 1))
#+end_src
** evil-mc
#+begin_src emacs-lisp
(e:deferred-config! evil-mc
  :after (evil)
  :config
  (global-evil-mc-mode 1))
#+end_src
** evil-nerd-commenter
#+begin_src emacs-lisp
(e:deferred-config! evil-nerd-commenter
  :after (evil)
  :require t)
#+end_src
** evil-surround
#+begin_src emacs-lisp
(e:deferred-config! evil-surround
  :after (evil)
  :config
  (general-def 'visual evil-surround-mode-map "s" 'evil-surround-region)
  (global-evil-surround-mode 1))
#+end_src
** evil-textobj-tree-sitter
#+begin_src emacs-lisp
(e:deferred-config! evil-textobj-tree-sitter
  :defun (evil-textobj-tree-sitter-function--function.inner
          evil-textobj-tree-sitter-function--function.outer)
  :config
  (general-def evil-inner-text-objects-map
    "f" (e:eval! (evil-textobj-tree-sitter-get-textobj "function.inner")))
  (general-def evil-outer-text-objects-map
    "f" (e:eval! (evil-textobj-tree-sitter-get-textobj "function.outer"))))
#+end_src
* Config: SKK
** skk
#+begin_src emacs-lisp
(e:deferred-config! ddskk
  :advice (:around evil-refresh-cursor ad:evil-refresh-cursor@with-skk)
  :hook ((evil-insert-state-entry-hook . e:skk-mode)
         (evil-insert-state-exit-hook . skk-mode-exit))
  :bind (([remap toggle-input-method] . skk-mode)
         ("C-¥" . skk-mode))
  :init
  (e:var! skk-user-directory "ddskk")
  (setopt ccc-default-cursor-color "DarkGoldenrod2")
  (setopt default-input-method "japanese-skk")
  (setopt skk-egg-like-newline t)
  ;; TODO: 辞書の場所を真面目に考える
  ;; (setopt skk-large-jisyo (f-expand "dic-mirror/SKK-JISYO.L" e:external-directory))
  (setopt skk-share-private-jisyo t)
  (setopt skk-show-annotation t)
  (setopt skk-sticky-key ";")
  ;; (setopt skk-use-azik t)
  (setopt skk-use-jisx0201-input-method t)
  (ccc-setup))
#+end_src
** skk-server
#+begin_src emacs-lisp
(e:deferred-config! skk-server
  :after (skk)
  :preface
  (setopt skk-server-prog (executable-find "yaskkserv2"))
  (setopt yaskkserv2-dictionary (f-expand "~/sync/share/dictionary.yaskkserv2"))
  :if (and (bound-and-true-p skk-server-prog)
           (f-exists? yaskkserv2-dictionary))
  :config
  (setopt skk-large-jisyo nil)
  (setopt skk-server-inhibit-startup-server t)
  (setopt skk-server-host "127.0.0.1")
  (setopt skk-server-portnum 1178)
  (e:prodigy-yaskkserv2))
#+end_src
** ddskk-posframe
#+begin_src emacs-lisp
(e:deferred-config! ddskk-posframe
  :after (skk)
  :config
  (ddskk-posframe-mode 1))
#+end_src
* Config: UI & Completions
** cape
#+begin_src emacs-lisp
(e:deferred-config! cape
  :hook ((prog-mode-hook . e:setup-capf/default)
         (org-mode-hook . e:setup-capf/org)
         (lsp-completion-mode-hook . e:setup-capf/lsp))
  :defer-config
  (setopt company-org-block-edit-style 'inline))
#+end_src
** consult
#+begin_src emacs-lisp
(e:deferred-config! consult
  :advice (:around consult-line ad:consult-line@with-orderless)
  :defer-config
  (setopt consult-line-start-from-top t))
#+end_src
** consult-gh
#+begin_src emacs-lisp :lexical no
(e:deferred-config! consult-gh
  :defun (consult-gh--get-current-orgs)
  :defer-config
  (setopt consult-gh-default-orgs-list (consult-gh--get-current-orgs t))
  (setopt consult-gh-show-preview t)
  (setopt consult-gh-preview-key "C-o"))
#+end_src
** consult-projectile
#+begin_src emacs-lisp
(e:deferred-config! consult-projectile
  :defer-config
  (e:eval!
    (setf (plist-get consult-projectile--source-projectile-dir :category) 'project-file)
    (setf (plist-get consult-projectile--source-projectile-file :category) 'project-file)
    (setf (plist-get consult-projectile--source-projectile-recentf :category) 'project-file)))
#+end_src
** copilot
#+begin_src emacs-lisp
(e:deferred-config! copilot
  :advice ((:before-until corfu-complete ad:copilot-accept-completion)
           (:before-until indent-for-tab-command ad:copilot-accept-completion)
           (:before cape-codeium ad:copilot-clear-overlay)
           (:before corfu-quick-complete ad:copilot-clear-overlay))
  :hook ((prog-mode-hook . copilot-mode)
         (org-mode-hook . copilot-mode))
  :init
  (e:var! copilot-install-dir "copilot")
  :defer-config
  (setopt copilot-indent-offset-warning-disable t)
  (setopt copilot-max-char 200000)
  ;; (add-to-list 'copilot-enable-predicates 'ignore)
  (general-def copilot-mode-map
   "<backtab>" 'copilot-complete
   "C-z" 'copilot-complete)
  (general-def copilot-completion-map
   "<escape>" 'copilot-clear-overlay
   "C-n" 'copilot-next-completion
   "C-p" 'copilot-previous-completion
   "C-z" 'copilot-complete))
#+end_src
** corfu
#+begin_src emacs-lisp
(e:deferred-config! corfu
  :defvar (corfu-map)
  :hook ((corfu-mode-hook . corfu-echo-mode)
         (corfu-mode-hook . corfu-popupinfo-mode)
         (minibuffer-setpu-hook . e:corfu-enable-always-in-minibuffer))
  :init
  (setopt corfu-auto t)
  (setopt corfu-auto-prefix 1)
  (setopt corfu-cycle t)
  (general-def corfu-map
    "<escape>" 'corfu-quit
    "C-q" 'corfu-quick-complete
    "C-z" 'cape-codeium)
  (global-corfu-mode 1))
#+end_src
** embark
#+begin_src emacs-lisp
(e:deferred-config! embark
  :config
  (general-def minibuffer-mode-map
    :prefix "C-c"
    "C-a" 'embark-act
    "C-c" 'embark-collect
    "C-d" 'embark-dwim
    "C-e" 'embark-export))
#+end_src
** flx-rs
#+begin_src emacs-lisp
(e:deferred-config! flx-rs
  :config
  (flx-rs-load-dyn))
#+end_src
** fussy
#+begin_src emacs-lisp
(e:deferred-config! fussy
  :init
  (setq completion-styles '(fussy orderless))
  (setq completion-category-defaults nil)
  (setq completion-category-overrides nil)
  :defer-config
  (setopt fussy-filter-fn 'fussy-filter-orderless)
  (setopt fussy-score-fn 'fussy-flx-rs-score)
  (setopt fussy-max-candidate-limit 5000))
#+end_src
** kind-icon
#+begin_src emacs-lisp
(e:deferred-config! kind-icon
  :after (corfu)
  :defvar (corfu-margin-formatters)
  :config
  (setopt kind-icon-default-face 'corfu-default)
  (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter))
#+end_src
** marginalia
#+begin_src emacs-lisp
(e:deferred-config! marginalia
  :config
  (marginalia-mode 1))
#+end_src
** orderless
#+begin_src emacs-lisp
(e:deferred-config! orderless
  :defvar (orderless-matching-styles)
  :config
  (setq orderless-matching-styles '(orderless-literal orderless-regexp orderless-migemo)))
#+end_src
** origami
#+begin_src emacs-lisp
(e:deferred-config! origami
  :hook (prog-mode-hook . origami-mode))
#+end_src
** vertico
#+begin_src emacs-lisp
(e:deferred-config! vertico
  :priority :high
  :config
  (setopt vertico-count 20)
  (setopt vertico-cycle t)
  (general-def vertico-map
    "C-l" 'vertico-directory-up
    "M-N" 'vertico-repeat-next
    "M-P" 'vertico-repeat-previous)
  (add-hook 'minibuffer-setup-hook #'vertico-repeat-save)
  (vertico-mode 1))
#+end_src
* Config: Org
** evil-org
#+begin_src emacs-lisp
(e:deferred-config! evil-org
  :hook (org-mode-hook . evil-org-mode)
  :defun (evil-org-set-key-theme
          evil-org-agenda-set-keys)
  :defer-config
  (setopt evil-org-key-theme
          '(navigation
            ;; insert
            ;; return
            textobjects
            additional
            ;; shift
            ;; todo
            ;; heading
            calendar))
  (evil-org-set-key-theme)
  (when (require 'evil-org-agenda nil t)
    (evil-org-agenda-set-keys)))
#+end_src
** org
#+begin_src emacs-lisp
(e:deferred-config! org
  :defer-config
  (setopt org-directory (f-expand "~/org/"))
  (setopt org-default-notes-file (e:org-note-file))
  (setopt org-log-done 'time)
  (setopt org-return-follows-link t)
  (setopt org-startup-folded nil)
  (setopt org-startup-indented t)
  (setopt org-tags-column 0)
  (setopt org-todo-keywords '((sequence "TODO(t)" "STARTED(s)" "|" "DONE(d)")
                              (sequence "WAITING(w)" "HOLD(h)" "|" "CANCELLED(c)")))
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (mermaid . t)
     (verb . t)
     (sql . t)))
  (e:major-mode-key-def org-mode
    "," 'org-ctrl-c-ctrl-c
    "d" "date"
    "dT" 'org-timestamp-inactive
    "dd" 'org-deadline
    "ds" 'org-schedule
    "dt" 'org-timestamp
    "t" "todo/toggle"
    "tc" 'org-toggle-checkbox
    "te" 'org-toggle-pretty-entities
    "ti" 'org-toggle-inline-images
    "tl" 'org-toggle-link-display
    "tn" 'org-num-mode
    "tt" 'org-todo
    "tx" 'org-latex-preview))
#+end_src
** org-agenda
#+begin_src emacs-lisp
(e:deferred-config! org-agenda
  :after (org)
  :config
  (setopt org-agenda-current-time-string "← now")
  (setopt org-agenda-entry-text-leaders (s-concat (s-repeat 25 " ") "│ "))
  (setopt org-agenda-entry-text-maxlines 20)
  (setopt org-agenda-tags-column 0)
  (setopt org-agenda-files (list (e:org-note-file)
                                 (e:org-tasks-file)
                                 (f-parent (e:org-archive-file))))
  (setopt org-agenda-span 28)
  (setopt org-agenda-time-grid '((daily today require-timed)
                                 (800 1000 1200 1400 1600 1800 2000)
                                 "      "
                                 "────────────────")))
#+end_src
** org-clock
#+begin_src emacs-lisp
(e:deferred-config! org-clock
  :after (org)
  :config
  (setopt org-clock-persist t)
  (org-clock-persistence-insinuate))
#+end_src
** org-faces
#+begin_src emacs-lisp
(e:deferred-config! org-faces
  :after (org)
  :config
  (setopt org-todo-keyword-faces
          '(("TODO"    . org-warning)
            ("WAITING" . org-done)
            ("HOLD"    . org-done)))
  (set-face-attribute 'org-todo nil :foreground "#00ff00")
  (set-face-attribute 'org-done nil :foreground "#696969")
  (set-face-attribute 'org-headline-done nil :foreground "#696969")
  (set-face-attribute 'org-headline-todo nil :foreground "#00ff00")
  (set-face-attribute 'org-level-1 nil :height 1.0)
  (set-face-attribute 'org-level-2 nil :height 1.0)
  (set-face-attribute 'org-level-3 nil :height 1.0))
#+end_src
** org-modern
#+begin_src emacs-lisp
(e:deferred-config! org-modern
  :after (org)
  :hook ((org-mode-hook . org-modern-mode)
         (org-agenda-finalize-hook . org-modern-agenda))
  :defer-config
  (setopt org-modern-star 'replace)
  (setopt org-modern-table nil)
  (setopt org-modern-todo-faces
          '(("TODO"      :background "#ff69b4" :foreground "#000000")
            ("STARTED"   :background "#90ee90" :foreground "#000000")
            ("DONE"      :background "#4d4d4d" :foreground "#ffffff")
            ("WAITING"   :background "#f0e68c" :foreground "#000000")
            ("HOLD"      :background "#999999" :foreground "#000000")
            ("CANCELLED" :background "#4d4d4d" :foreground "#ffffff")))
  (setopt org-modern-priority-faces
          '((?A :background "#ff4500" :foreground "#ffffff")
            (?B :background "#ffd700" :foreground "#000000")
            (?C :background "#00bfff" :foreground "#000000")))
  (setopt org-modern-tag-faces
          '((t :background "#caa6df" :foreground "#000000")))
  (setopt org-modern-checkbox
          '((88 . "󰱒 ")
            (45 . "󰡖 ")
            (32 . "󰄱 ")))
  (setopt org-modern-list
          '((42 . "•")   ;; +: Plus
            (43 . "◦")   ;; *: Asterisk
            (45 . "–"))) ;; -: Dash
  )
#+end_src
** org-modern-indent
#+begin_src emacs-lisp
(e:deferred-config! org-modern-indent
  :hook (org-indent-mode-hook . org-modern-indent-mode))
#+end_src
** org-refile
#+begin_src emacs-lisp
(e:deferred-config! org-refile
  :after (org)
  :config
  (setopt org-refile-targets
          '((e:org-tasks-file   :level . 1)
            (e:org-archive-file :level . 1)))
  (setopt org-refine-use-outline-path 'file))
#+end_src
** org-sliced-images
#+begin_src emacs-lisp
(e:deferred-config! org-sliced-images
  :after (org)
  :config
  (org-sliced-images-mode 1))
#+end_src
** org-src
#+begin_src emacs-lisp
(e:deferred-config! org-src
  :after (org)
  :config
  (setopt org-edit-src-content-indentation 0)
  (setopt org-src-window-setup 'split-window-below))
#+end_src
* Config: Packages
** ace-window
#+begin_src emacs-lisp
(e:deferred-config! ace-window
  :defer-config
  (setopt aw-keys (number-sequence ?1 ?9))
  (setopt aw-scope 'frame))
#+end_src
** affe
#+begin_src emacs-lisp
(e:deferred-config! affe
  :defvar (affe-find-command)
  :defer-config
  (setopt affe-find-command (or (executable-find "fd") affe-find-command))
  (setopt affe-regexp-function 'orderless-pattern-compiler)
  (setopt affe-highlight-function 'orderless--highlight))
#+end_src
** atomic-chrome
#+begin_src emacs-lisp
(e:deferred-config! atomic-chrome
  :config
  (atomic-chrome-start-server))
#+end_src
** apheleia
#+begin_src emacs-lisp
(e:deferred-config! apheleia
  :defvar (apheleia-formatters apheleia-mode-alist)
  :config
  (apheleia-global-mode 1)
  :defer-config
  (setopt apheleia-inhibit-functions
          '(e:apheleia-inhibit-unnecesary-major-mode
            e:apheleia-inhibit-rubocop-excludes))
  ;; formatters
  (setf (alist-get 'rubocop apheleia-formatters)
        '((if (e:bundle-exists "rubocop")
              '("bundle" "exec" "rubocop")
            "rubocop")
          file "--autocorrect" "--stderr" "--format" "quiet" "--fail-level" "fatal"))
  ;; mode-alist
  (setf (alist-get 'ruby-ts-mode apheleia-mode-alist)
        '(rubocop)))
#+end_src
** avy
#+begin_src emacs-lisp
(e:deferred-config! avy
  :config
  (with-eval-after-load 'evil
    (general-def '(normal motion)
      "S" 'evil-avy-goto-word-0
      "gj" 'evil-avy-goto-line-below
      "gk" 'evil-avy-goto-line-above))
  :defer-config
  (setopt avy-keys (number-sequence ?a ?z))
  (setopt avy-all-windows t)
  (setopt avy-all-windows-alt nil))
#+end_src
** chezmoi
#+begin_src emacs-lisp
(e:deferred-config! chezmoi
  :commands (chezmoi-diff
             chezmoi-find
             chezmoi-open-other
             chezmoi-sync-files
             chezmoi-template-buffer-display
             chezmoi-wirte)
  :hook (find-file-hook . e:reopen-in-chezmoi-mode))
#+end_src
** denote
 denote
#+begin_src emacs-lisp
(e:deferred-config! denote
  :defer-config
  (eval-and-compile (require 'org))
  (setopt denote-directory (expand-file-name "denote" org-directory))
  (setopt denote-known-keywords '("memo" "task")))
#+end_src
** difftastic
#+begin_src emacs-lisp
(e:deferred-config! difftastic
  :config
  (with-eval-after-load 'magit-diff
    (transient-append-suffix 'magit-diff '(-1 -1)
      [("D" "Difftastic diff (dwim)" difftastic-magit-diff)
       ("S" "Difftastic show" difftastic-magit-show)])))
#+end_src
** doom-modeline
#+begin_src emacs-lisp
(e:deferred-config! doom-modeline
  :config
  (setopt doom-modeline-buffer-file-name-style 'relative-from-project)
  (setopt doom-modeline-hud t)
  (setopt doom-modeline-minor-modes t)
  (setopt doom-modeline-percent-position nil)
  (setopt doom-modeline-total-line-number t)
  (doom-modeline-mode 1))
#+end_src
** dtrt-indent
#+begin_src emacs-lisp
(e:deferred-config! dtrt-indent
  :defvar (dtrt-indent-hook-mapping-list)
  :hook (prog-mode-hook . dtrt-indent-mode)
  :config
  (add-to-list 'dtrt-indent-hook-mapping-list
               '(js-ts-mode javascript js-indent-level)))
#+end_src
** dumb-jump
#+begin_src emacs-lisp
(e:deferred-config! dumb-jump
  :config
  (add-hook 'xref-backend-functions #'dumb-jump-xref-activate))
#+end_src
** editorconfig
#+begin_src emacs-lisp
(e:deferred-config! editorconfig
  :config
  (editorconfig-mode 1))
#+end_src
** elisp-demos
#+begin_src emacs-lisp
(e:deferred-config! elisp-demos
  :advice ((:after describe-function-1 elisp-demos-advice-describe-function-1)
           (:after helpful-update      elisp-demos-advice-helpful-update)))
#+end_src
** exec-path-from-shell
#+begin_src emacs-lisp
(e:deferred-config! exec-path-from-shell
  :config
  (when (memq window-system '(mac ns x))
    (exec-path-from-shell-initialize)))
#+end_src
** fancy-compilation
#+begin_src emacs-lisp
(e:deferred-config! fancy-compilation
  :config
  (fancy-compilation-mode 1))
#+end_src
** flycheck
#+begin_src emacs-lisp
(e:deferred-config! flycheck
  :advice (:around flycheck-start-command-checker ad:flycheck-start-command-checker@with-cwd)
  :config
  (setopt flycheck-check-syntax-automatically '(save idle-change mode-enabled))
  (setopt flycheck-idle-change-delay 5.0)
  (setopt flycheck-emacs-lisp-load-path 'inherit)
  (global-flycheck-mode 1)
  (e:eval! ;; haml-lint
    (flycheck-add-next-checker 'haml 'haml-lint)
    (flycheck-def-config-file-var flycheck-haml-lintrc haml-lint ".haml-lint.yml" :safe #'stringp)
    (setf (flycheck-checker-get 'haml-lint 'command)
          '("haml-lint" "--no-color" "--no-summary"
            (config-file "--config" flycheck-haml-lintrc)
            source-inplace))))
#+end_src
** flycheck-posframe
#+begin_src emacs-lisp
(e:deferred-config! flycheck-posframe
  :hook (flycheck-mode-hook . flycheck-posframe-mode)
  :defer-config
  (setopt flycheck-posframe-border-width 1)
  (setopt flycheck-posframe-position 'frame-bottom-right-corner))
#+end_src
** git-gutter
#+begin_src emacs-lisp
(e:deferred-config! git-gutter
  :config
  (global-git-gutter-mode 1))
#+end_src
** helm
#+begin_src emacs-lisp
(e:deferred-config! helm
  :bind (([remap eval-expression] . helm-eval-expression-with-eldoc)))
#+end_src
** highlight-indentation
#+begin_src emacs-lisp
(e:deferred-config! highlight-indentation
  :commands (highlight-indentation-mode-on)
  :config
  (setopt highlight-indentation-offset 2)
  :defer-config
  (set-face-attribute 'highlight-indentation-face nil :background "#202020" :inherit nil)
  (e:define-minor-mode-switch highlight-indentation-mode))
#+end_src
** hl-todo
#+begin_src emacs-lisp
(e:deferred-config! hl-todo
  :config
  (global-hl-todo-mode 1))
#+end_src
** jinx
#+begin_src emacs-lisp
(e:deferred-config! jinx
  :defvar (jinx-exclude-regexps jinx-include-faces)
  :hook (prog-mode-hook . jinx-mode)
  :config
  (setopt jinx-languages "en_US")
  (setf (alist-get 'prog-mode jinx-include-faces)
        '(font-lock-comment-face
          font-lock-constant-face
          font-lock-doc-face
          font-lock-function-name-face
          font-lock-string-face
          font-lock-type-face))
  ;; https://github.com/minad/jinx/issues/4#issuecomment-1484786256
  (let ((re (alist-get t jinx-exclude-regexps)))
    (cl-pushnew "\\cc" re :test #'string=)
    (setf (alist-get t jinx-exclude-regexps) re)))
#+end_src
** locale-eaw
#+begin_src emacs-lisp
(e:deferred-config! eaw-fullwidth
  :require t)
#+end_src
** macrostep
#+begin_src emacs-lisp
(e:deferred-config! macrostep
  :config
  (hercules-def
   :toggle-funs #'macrostep-mode
   :keymap 'macrostep-keymap)
  (e:major-mode-key-def (emacs-lisp-mode lisp-interaction-mode)
    "d" "debug"
    "dm" 'macrostep-mode))
#+end_src
** magit
*** magit
#+begin_src emacs-lisp
(e:deferred-config! magit
  :advice (:override magit-repos-alist ad:magit-repos-alist@override)
  :defun (magit-add-section-hook)
  :defer-config
  (when (require 'forge nil t)
    (set-face-attribute 'forge-topic-slug-open nil :foreground "#f5f5f5" :inherit nil)
    (set-face-attribute 'forge-topic-unread nil :foreground "#00fa9a" :weight 'normal :box nil)
    (set-face-attribute 'forge-topic-pending nil :weight 'normal)
    (set-face-attribute 'forge-topic-done nil :inherit 'forge-dimmed :slant 'normal)
    (set-face-attribute 'forge-pullreq-open nil :foreground 'unspecified)
    (set-face-attribute 'forge-pullreq-merged nil :foreground 'unspecified :inherit 'forge-dimmed)
    (set-face-attribute 'forge-pullreq-rejected nil :foreground 'unspecified :inherit 'forge-dimmed))
  (setopt magit-delete-by-moving-to-trash nil)
  (setopt magit-diff-refine-hunk 'all)
  (setopt magit-diff-refine-ignore-whitespace t)
  (setopt magit-display-buffer-function 'magit-display-buffer-same-window-except-diff-v1)
  (setopt magit-log-margin '(t "%Y-%m-%d %H:%M" magit-log-margin-width t 15))
  (setopt magit-log-margin-show-committer-date t)
  (setopt magit-refs-show-branch-descriptions t)
  (e:setup-magit-repository-directories)
  (e:setup-marginalia-magit)
  ;; magit-status で表示するセクションを追加
  (--each '(magit-insert-skip-worktree-files magit-insert-modules-overview)
    (magit-add-section-hook 'magit-status-sections-hook it 'magit-insert-unpulled-from-upstream t))
  ;; magit-log のデフォルトオプション設定
  (let ((argments '("--graph" "-n256" "--decorate" "--date-order" "--show-signature")))
    (put 'magit-log-mode 'magit-log-default-arguments argments)
    (put 'magit-log-select-mode 'magit-log-default-arguments argments)))
#+end_src
*** magit-delta
#+begin_src emacs-lisp
(e:deferred-config! magit-delta
  :advice (:around magit-delta-call-delta-and-convert-ansi-escape-sequences
                   ad:magit-delta-call-delta-and-convert-ansi-escape-sequences@auto-disable)
  :hook ((magit-mode-hook . magit-delta-mode)
         (magit-post-refresh-hook . e:nth/magit-delta-auto-enable))
  :defer-config
  (setopt magit-delta-hide-plus-minus-markers nil))
#+end_src
*** magit-file-icons
#+begin_src emacs-lisp
;; (e:deferred-config! magit-file-icons
;;   :after (magit)
;;   :config
;;   (magit-file-icons-mode 1))
#+end_src
** mise
#+begin_src emacs-lisp
(e:deferred-config! mise
  :config
  (global-mise-mode 1))
#+end_src
** nerd-icons-completion
#+begin_src emacs-lisp
(e:deferred-config! nerd-icons-completion
  :hook (merginalia-mode-hook . nerd-icons-completion-marginalia-setup)
  :init
  (nerd-icons-completion-mode))
#+end_src
** nerd-icons-dired
#+begin_src emacs-lisp
(e:deferred-config! nerd-icons-dired
  :hook (dired-mode-hook . nerd-icons-dired-mode))
#+end_src
** migemo
#+begin_src emacs-lisp
(e:deferred-config! migemo
  :config
  (require 'migemo)
  (setopt migemo-user-dictionary nil)
  (setopt migemo-regex-dictionary nil)
  (e:if! (eq system-type 'darwin)
    (setopt migemo-dictionary "/usr/local/share/migemo/utf-8/migemo-dict"))
  (e:if! (eq system-type 'gnu/linux)
    (setopt migemo-dictionary "/usr/share/migemo/utf-8/migemo-dict")))
#+end_src
** minions
#+begin_src emacs-lisp
(e:deferred-config! minions
  :config
  (minions-mode 1))
#+end_src
** open-junk-file
#+begin_src emacs-lisp
(e:deferred-config! open-junk-file
  :config
  (setopt open-junk-file-format (f-expand "junk/%Y/%Y%m%d%H%M%S." no-littering-var-directory)))
#+end_src
** pr-review
#+begin_src emacs-lisp
(e:deferred-config! pr-review
  :advice (:around pr-review--insert-subscription-info ad:ignore-errors))
#+end_src
** prodigy
#+begin_src emacs-lisp
(e:deferred-config! prodigy
  :advice (:around prodigy-start-service ad:prodigy-start-service@with-vterm)
  :defun (prodigy-find-service prodigy-start-service)
  :defer-config
  (setopt prodigy-view-buffer-maximum-size 2048)
  (setopt prodigy-view-truncate-by-default t)
  (prodigy-define-tag
    :name 'rails
    :ready-message "Use Ctrl-C to stop"))
#+end_src
** projectile
#+begin_src emacs-lisp
(e:deferred-config! projectile
  :defer-config
  (e:setup-projectile-known-projects))
#+end_src
** scratch
*** scratch
#+begin_src emacs-lisp
(e:deferred-config! scratch
  :config
  (setopt persistent-scratch-scratch-buffer-p-function #'e:scratch-buffer-p)
  (save-window-excursion
    (scratch-buffer)
    (funcall initial-major-mode)
    (display-line-numbers-mode-on)))
#+end_src
*** persistent-scratch
#+begin_src emacs-lisp
(e:deferred-config! persistent-scratch
  :priority :high
  :config
  (persistent-scratch-setup-default))
#+end_src
** separedit
#+begin_src emacs-lisp
(e:deferred-config! separedit
  :config
  (general-def prog-mode-map
    "C-c '" 'separedit)
  :defer-config
  (setopt separedit-preserve-string-indentation t))
#+end_src
** shackle
#+begin_src emacs-lisp
(e:deferred-config! shackle
  :advice ((:after shackle-display-buffer-action ad:shackle-display-buffer-action@save-windows)
           (:before keyboard-quit ad:keyboard-quit@shackle-auto-close))
  :config
  (setopt shackle-rules
          '(;;
            ("*Backtrace*"        :align bottom :ratio 0.35 :select t)
            ("*Flycheck errors*"  :align bottom :ratio 0.35 :select t)
            ("*Google Translate*" :align bottom :ratio 0.35 :select t)
            ("*Help*"             :align bottom :ratio 0.35 :select t)
            ;;
            ("*Async Shell Command*"          :align bottom :ratio 0.35)
            ("*Bundler*"                      :align bottom :ratio 0.35)
            ("*General Keybindings*"          :align bottom :ratio 0.35)
            ("*Make*"                         :align bottom :ratio 0.35)
            ("*Warnings*"                     :align bottom :ratio 0.35)
            ("*compilation*"                  :align bottom :ratio 0.35)
            ("*projectile-rails-compilation*" :align bottom :ratio 0.35)
            ("*rspec-compilation*"            :align bottom :ratio 0.35)
            ("*trace-output*"                 :align bottom :ratio 0.35)
            ))
  (shackle-mode 1))
#+end_src
** shell-pop
#+begin_src emacs-lisp
(e:deferred-config! shell-pop
  :advice (:around shell-pop ad:shell-pop@auto-session-name)
  :config
  (setopt shell-pop-shell-type '("vterm" "*vterm-default*" (lambda () (vterm))))
  :defer-config
  (setopt shell-pop-autocd-to-working-dir nil)
  (setopt shell-pop-full-span t)
  (setopt shell-pop-window-size 50))
#+end_src
** smartparens
#+begin_src emacs-lisp
(e:deferred-config! smartparens
  :defun (sp-local-pair)
  :config
  (setopt sp-cancel-autoskip-on-backward-movement nil)
  (setopt sp-highlight-pair-overlay nil)
  (setopt sp-highlight-wrap-overlay nil)
  (setopt sp-highlight-wrap-tag-overlay nil)
  (setopt sp-show-pair-from-inside t)
  (smartparens-global-mode 1)
  (show-smartparens-global-mode 1)
  (sp-local-pair 'emacs-lisp-mode "'" nil :actions nil)
  (sp-local-pair 'lisp-interaction-mode "'" nil :actions nil)
  (require 'smartparens-config))
#+end_src
** symbol-overlay
#+begin_src emacs-lisp
(e:deferred-config! symbol-overlay
  :defer-config
  (setopt symbol-overlay-map (make-sparse-keymap)))
#+end_src
** transient
#+begin_src emacs-lisp
(e:deferred-config! transient
  :defer-config
  (setopt transient-default-level 7)
  (e:var! transient-values-file "transient-values.el"))
#+end_src
** undo-fu
#+begin_src emacs-lisp
(e:deferred-config! undo-fu
  :config
  (setopt evil-undo-system 'undo-fu))
#+end_src
** visual-regexp
#+begin_src emacs-lisp
(e:deferred-config! visual-regexp
  :bind ([remap query-replace] . vr/query-replace))
#+end_src
** vterm
#+begin_src emacs-lisp
(e:deferred-config! vterm
  :defer-config
  (setopt vterm-max-scrollback 20000)
  (setopt vterm-shell "tmux new -A -s emacs-default")
  (general-def vterm-mode-map
    "<wheel-down>" 'ignore
    "<wheel-up>" 'ignore
    "C-c C-g" 'keyboard-quit
    "C-g" 'vterm--self-insert)
  (general-def 'insert vterm-mode-map
    "<escape>" 'vterm-send-escape
    "C-z" 'vterm--self-insert))
#+end_src
** wakatime-mode
#+begin_src emacs-lisp
(e:deferred-config! wakatime-mode
  :defvar (wakatime-cli-path)
  :preface
  (setopt wakatime-cli-path (executable-find "wakatime-cli"))
  :if (and wakatime-cli-path
           (bound-and-true-p wakatime-api-key))
  :config
  (global-wakatime-mode 1))
#+end_src
** which-key
#+begin_src emacs-lisp
(e:deferred-config! which-key
  :config
  (setopt which-key-idle-delay 0.4)
  (setopt which-key-idle-secondary-delay 0.01)
  (setopt which-key-min-display-lines 6)
  (setopt which-key-show-early-on-C-h t)
  (setopt which-key-sort-order 'which-key-key-order-alpha)
  (which-key-mode 1))
#+end_src
** winum
#+begin_src emacs-lisp
(e:deferred-config! winum
  :config
  (winum-mode 1))
#+end_src
* Config: Languages
** Tools
*** lsp-mode
#+begin_src emacs-lisp
(e:deferred-config! lsp-mode
  :advice ((:around lsp-resolve-final-command ad:lsp-resolve-final-command@with-lsp-booster)
           (:around json-parse-buffer ad:json-read@with-lsp-booster))
  :defun (lsp-deferred)
  :defer-config
  (setopt lsp-auto-execute-action nil)
  (setopt lsp-completion-provider :none)
  (setopt lsp-disabled-clients '(ruby-ls rubocop-ls))
  (setopt lsp-enable-file-watchers nil)
  (setopt lsp-enable-snippet nil)
  (setopt lsp-file-watch-threshold 100000)
  (setopt lsp-imenu-sort-methods '(position))
  (setopt lsp-modeline-code-actions-enable nil)
  (setopt lsp-restart 'ignore)
  (e:minor-mode-key-def lsp-mode
    "=" "format"
    "=b" 'lsp-format-buffer
    "=o" 'lsp-organize-imports
    "=r" 'lsp-format-region
    "a" "code action"
    "aa" 'lsp-execute-code-action
    "b" "backend"
    "bd" 'lsp-describe-session
    "br" 'lsp-workspace-restart
    "bs" 'lsp-workspace-shutdown
    "bv" 'lsp-version
    "r" "refactor"
    "rr" 'lsp-rename))
#+end_src
*** lsp-ui
#+begin_src emacs-lisp
(e:deferred-config! lsp-ui
  :defer-config
  (setopt lsp-ui-doc-delay 2.0)
  (setopt lsp-ui-doc-include-signature t)
  (setopt lsp-ui-doc-position 'at-point)
  (setopt lsp-ui-doc-show-with-cursor t)
  (setopt lsp-ui-sideline-enable nil))
#+end_src
*** lsp-rubocop
#+begin_src emacs-lisp
(e:deferred-config! lsp-rubocop
  :advice (:before lsp-rubocop--build-command ad:lsp-rubocop--build-command@auto-detect)
  :defer-config
  (e:set-lsp-client-add-on 'rubocop-ls t))
#+end_src
*** lsp-solargraph
#+begin_src emacs-lisp
(e:deferred-config! lsp-solargraph
  :advice (:before lsp-solargraph--build-command ad:lsp-solargraph--build-command@auto-detect)
  :defer-config
  (setopt lsp-solargraph-library-directories '("~/.asdf/installs/ruby")))
#+end_src
*** lsp-volar
#+begin_src emacs-lisp
(e:deferred-config! lsp-volar
  :defer-config
  (setopt lsp-volar-take-over-mode nil))
#+end_src
*** tree-sitter
#+begin_src emacs-lisp
(e:deferred-config! treesit-auto
  :commands (global-treesit-auto-mode treesit-auto-add-to-auto-mode-alist)
  :defvar (treesit-auto-langs)
  :init
  (treesit-auto-add-to-auto-mode-alist)
  (global-treesit-auto-mode 1)
  :defer-config
  (setopt treesit-auto-install t)
  (setopt treesit-auto-langs (delete 'vue treesit-auto-langs))
  (setopt treesit-language-source-alist
          '((vue "https://github.com/ikatyang/tree-sitter-vue"))))
#+end_src
** Ruby
*** ruby-ts-mode
#+begin_src emacs-lisp
(e:deferred-config! ruby-ts-mode
  :hook ((ruby-ts-mode-hook . lsp-deferred)
         (ruby-ts-mode-hook . e:devdocs-ruby))
  :mode "\\.csb\\'" "\\.csvbuilder\\'" "\\.axlsx\\'" "\\.simplecov\\'"
  :defer-config
  (e:eval! ;; native compile されると動かない？
    (grugru-define-multiple
      (ruby-ts-mode
       (symbol "have_button" "have_no_button")
       (symbol "have_content" "have_no_content")
       (symbol "have_link" "have_no_link")
       (symbol "if" "unless")
       (symbol "let" "let!")
       (symbol "to" "not_to")
       (symbol "true" "false"))))
  (e:major-mode-key-def ruby-ts-mode
    "b" "bundle"
    "bc" 'bundle-check
    "bi" 'bundle-install
    "bo" 'bundle-open
    "bu" 'bundle-update
    "bx" 'bundle-exec
    "r" "refactor"
    "r\u0022" 'ruby-toggle-string-quotes ;; double quotation
    "r'" 'ruby-toggle-string-quotes
    "r{" 'ruby-toggle-block
    "r}" 'ruby-toggle-block))
#+end_src
*** haml-mode
#+begin_src emacs-lisp
(e:deferred-config! haml-mode
  :hook ((haml-mode-hook . e:setup-haml-mode)
         (haml-mode-hook . emmet-mode)
         (haml-mode-hook . highlight-indentation-mode-on)))
#+end_src
*** projectile-rails
#+begin_src emacs-lisp
(e:deferred-config! projectile-rails
  :init
  (projectile-rails-global-mode 1)
  :config
  (e:setup-projectile-rails-views-re)
  (e:var! rake-cache-file "rake.cache")
  (setopt rake-completion-system 'completing-read-default)
  (e:setup-projectile-rails-annotation controller "app/controllers" "*")
  (e:setup-projectile-rails-annotation environment "config")
  (e:setup-projectile-rails-annotation helper "app/helpers" "_helper")
  (e:setup-projectile-rails-annotation layout "app/views/layouts")
  (e:setup-projectile-rails-annotation lib "lib")
  (e:setup-projectile-rails-annotation locale "config/locales")
  (e:setup-projectile-rails-annotation mailer "app/mailers")
  (e:setup-projectile-rails-annotation migration "db/migrate")
  (e:setup-projectile-rails-annotation model "app/models")
  (e:setup-projectile-rails-annotation spec "spec" "_spec")
  (e:setup-projectile-rails-annotation validator "app/validators" "_validator")
  (e:setup-projectile-rails-annotation view "app/views")
  (e:setup-projectile-rails-annotation job "app/jobs" "_job")
  (e:minor-mode-key-def projectile-rails-mode
    "f" "rails"
    "f:" '("rake" . projectile-rails-rake)
    "fc" "generate/destroy"
    "fcc" '("generate" . projectile-rails-generate)
    "fcd" '("destroy" . projectile-rails-destroy)
    "ff" "find"
    "ff@" '("mailer" . projectile-rails-find-mailer)
    "ffF" '("feature" . projectile-rails-find-feature)
    "ffV" '("view component" . e:projectile-rails-find-view-components)
    "ffa" '("locale" . projectile-rails-find-locale)
    "ffb" '("job" . projectile-rails-find-job)
    "ffc" '("controller" . projectile-rails-find-controller)
    "ffe" '("environment" . projectile-rails-find-environment)
    "fff" '("form" . e:projectile-rails-find-form)
    "ffg" '("graphql" . e:projectile-rails-find-graphql)
    "ffh" '("helper" . projectile-rails-find-helper)
    "ffi" '("initializer" . projectile-rails-find-initializer)
    "ffj" '("javascript" . projectile-rails-find-javascript)
    "ffl" '("lib" . projectile-rails-find-lib)
    "ffm" '("model" . projectile-rails-find-model)
    "ffn" '("migration" . projectile-rails-find-migration)
    "ffo" '("log" . projectile-rails-find-log)
    "ffp" '("spec" . projectile-rails-find-spec)
    "ffr" '("rake task" . projectile-rails-find-rake-task)
    "ffs" '("stylesheet" . projectile-rails-find-stylesheet)
    "fft" '("test" . projectile-rails-find-test)
    "ffu" '("fixture" . projectile-rails-find-fixture)
    "ffv" '("view" . projectile-rails-find-view)
    "ffw" '("webpack" . projectile-rails-find-webpack)
    "ffy" '("layout" . projectile-rails-find-layout)
    "fg" "goto"
    "fg." '("point" . projectile-rails-goto-file-at-point)
    "fgc" '("controller" . projectile-rails-find-current-controller)
    "fgd" '("schema" . projectile-rails-goto-schema)
    "fge" '("seeds" . projectile-rails-goto-seeds)
    "fgg" '("gemfile" . projectile-rails-goto-gemfile)
    "fgh" '("helper" . projectile-rails-find-current-helper)
    "fgj" '("javascript" . projectile-rails-find-current-javascript)
    "fgm" '("model" . projectile-rails-find-current-model)
    "fgn" '("migration" . projectile-rails-find-current-migration)
    "fgp" '("spec" . projectile-rails-find-current-spec)
    "fgr" '("routes" . projectile-rails-goto-routes)
    "fgs" '("stylesheet" . projectile-rails-find-current-stylesheet)
    "fgt" '("test" . projectile-rails-find-current-test)
    "fgu" '("fixture" . projectile-rails-find-current-fixture)
    "fgv" '("view" . projectile-rails-find-current-view)
    "fgz" '("helper" . projectile-rails-goto-spec-helper)
    "i" "insert"
    "iR" '("route" . rails-routes-insert-no-cache)
    "ir" '("route" . rails-routes-insert)))
#+end_src
*** rails-routes
#+begin_src emacs-lisp
(e:deferred-config! rails-routes
  :advice ((:override rails-routes--run-command ad:rails-routes--run-command@override)
           (:override rails-routes-insert       ad:rails-routes-insert@override))
  :defer-config
  (e:var! rails-routes-cache-path "rails-routes")
  (e:setup-marginalia-annotate-rails-routes))
#+end_src
*** rspec-mode
#+begin_src emacs-lisp
(e:deferred-config! rspec-mode
  :defer-config
  (e:minor-mode-key-def rspec-mode
    "t" "test"
    "t TAB" 'rspec-toggle-spec-and-target
    "ta" 'rspec-verify-all
    "tb" 'rspec-verify
    "tc" 'rspec-verify-continue
    "te" 'rspec-toggle-example-pendingness
    "tf" 'rspec-verify-method
    "tl" 'rspec-run-last-failed
    "tm" 'rspec-verify-matching
    "tr" 'rspec-rerun
    "tt" 'rspec-verify-single
    "t~" 'rspec-toggle-spec-and-target-find-example))
#+end_src
** TypeScript/JavaScript
*** typescript-ts-mode
#+begin_src emacs-lisp
(e:deferred-config! typescript-ts-mode
  :hook ((typescript-ts-mode-hook . lsp-deferred)
         (tsx-ts-mode-hook . lsp-deferred)
         (tsx-ts-mode-hook . emmet-mode))
  :mode "\\.mts\\'")
#+end_src
*** vue-mode
#+begin_src emacs-lisp
(e:deferred-config! vue-mode
  :config
  (define-derived-mode vue-mode web-mode "Vue")
  (add-to-list 'auto-mode-alist '("\\.vue\\'" . vue-mode))
  (add-hook 'vue-mode-hook #'lsp-deferred)
  (add-hook 'vue-mode-hook #'emmet-mode))
#+end_src
*** vue-ts-mode
#+begin_src emacs-lisp :tangle no
(e:deferred-config! vue-ts-mode
  :hook ((vue-ts-mode-hook . lsp-deferred)
         (vue-ts-mode-hook . emmet-mode))
  :mode "\\.vue\\'")
#+end_src
*** yarn
#+begin_src emacs-lisp
(e:deferred-config! yarn
  :commands (yarn-install
             yarn-self-udpate
             yarn-update
             yarn-upgrade))
#+end_src
** HTML/CSS
*** web-mode
#+begin_src emacs-lisp
(e:deferred-config! web-mode
  :hook (web-mode-hook . emmet-mode)
  :mode "\\.erb\\'"
  :defer-config
  (setopt web-mode-enable-auto-indentation nil)
  (setopt web-mode-block-padding 0)
  (setopt web-mode-part-padding 0)
  (setopt web-mode-script-padding 0)
  (setopt web-mode-style-padding 0))
#+end_src
*** sass-mode
#+begin_src emacs-lisp
(e:deferred-config! sass-mode
  :hook (sass-mode-hook . rainbow-mode))
#+end_src
*** scss-mode
#+begin_src emacs-lisp
(e:deferred-config! scss-mode
  :hook (scss-mode-hook . rainbow-mode))
#+end_src
*** emmet-mode
#+begin_src emacs-lisp
(e:deferred-config! emmet-mode
  :defer-config
  (general-def emmet-mode-keymap
    "<C-return>" nil
    "C-c C-j" 'emmet-expand-line
    "C-j" nil))
#+end_src
** Text
*** yaml-ts-mode
#+begin_src emacs-lisp
(e:deferred-config! yaml-mode
  :commands (yaml-indent-line))
(e:deferred-config! yaml-ts-mode
  :hook ((yaml-ts-mode-hook . lsp-deferred)
         (yaml-ts-mode-hook . highlight-indentation-mode-on))
  :defer-config
  (general-def yaml-ts-mode-map
    "TAB" 'yaml-indent-line))
#+end_src
* Config: Keybinds
** Space
*** スペースがプレフィックスとして使用できない場合の代替キー
#+begin_src emacs-lisp
(general-def '(motion normal visual)
  "M-m" (general-simulate-key "SPC"))
#+end_src
*** root
#+begin_src emacs-lisp
(e:key-def root nil
  "SPC" '(execute-extended-command :wk "M-x")
  "TAB" '(e:switch-to-last-buffer :wk "Last buffer")
  "!" 'shell-command
  "%" 'query-replace
  "&" 'async-shell-command
  "*" '(e:consult-ripgrep-dwim :wk "ripgrep(dwim)")
  "/" '(consult-ripgrep :wk "ripgrap")
  ";" 'evilnc-comment-operator
  "^" 'ace-window
  "|" 'shell-command-on-region
  "1" '(winum-select-window-1 :wk "window 1")
  "2" '(winum-select-window-2 :wk "window 2")
  "3" '(winum-select-window-3 :wk "window 3")
  "4" '(winum-select-window-4 :wk "window 4")
  "5" '(winum-select-window-5 :wk "window 5")
  "6" '(winum-select-window-6 :wk "window 6")
  "7" '(winum-select-window-7 :wk "window 7")
  "8" '(winum-select-window-8 :wk "window 8")
  "9" '(winum-select-window-9 :wk "window 9")
  "m" '(:ignore t :wk "mode")
  "u" 'universal-argument
  "v" 'er/expand-region)
#+end_src
*** [F] frame
#+begin_src emacs-lisp
(e:key-def frame F
  "" '(:ignore t :wk "frame")
  "D" 'delete-other-frames
  "d" 'delete-frame
  "n" 'make-frame
  "o" 'other-frame)
#+end_src
*** [a] application...
#+begin_src emacs-lisp
(e:key-def application a
  "" '(:ignore t :wk "application")
  "c" '(:ignore t :wk "chezmoi")
  "cd" 'chezmoi-diff
  "cf" 'chezmoi-find
  "co" 'chezmoi-open-other
  "cs" 'chezmoi-sync-files
  "ct" 'chezmoi-template-buffer-display
  "cw" 'chezmoi-write
  "d" '(e:consult-dunst-history :wk "dunst history")
  "o" '(:ignore t :wk "org")
  "oa" 'org-agenda-list
  "oc" 'org-capture
  "ol" 'org-store-link
  "om" 'org-tags-view
  "oo" 'org-agenda
  "os" 'org-search-view
  "ot" 'org-todo-list
  "p" '(:ignore t :wk "packages")
  "pa" 'borg-activate
  "pb" 'borg-build
  "pc" 'borg-clone
  "pd" 'borg-remove
  "pi" 'borg-assimilate
  "pl" 'epkg-list-packages
  "pu" 'epkg-update
  "pv" 'epkg-describe-package
  "t" '(:ignore t :wk "tools")
  "tp" 'prodigy)
#+end_src
*** [b] buffer
#+begin_src emacs-lisp
(e:key-def buffer b
  "" '(:ignore t :wk "buffer")
  "S" 'scratch
  "b" 'consult-buffer
  "d" 'kill-buffer
  "m" '(e:switch-to-messages-buffer :wk "Messages buffer")
  "s" 'scratch-buffer
  "w" 'read-only-mode)
#+end_src
*** [e] error
#+begin_src emacs-lisp
(e:key-def error e
  "" '(:ignore t :wk "error")
  "S" 'flycheck-set-checker-executable
  "Y" 'e:flycheck-copy-error-ids
  "b" 'flycheck-buffer
  "c" 'flycheck-clear
  "d" 'flycheck-disable-checker
  "e" 'consult-flycheck
  "h" 'flycheck-describe-checker
  "l" 'flycheck-list-errors
  "n" 'flycheck-next-error
  "p" 'flycheck-previous-error
  "s" 'flycheck-select-checker
  "v" 'flycheck-verify-setup
  "x" 'flycheck-explain-error-at-point
  "y" 'flycheck-copy-errors-as-kill)
#+end_src
*** [f] file
#+begin_src emacs-lisp
(e:key-def file f
  "" '(:ignore t :wk "file")
  "S" 'evil-write-all
  "a" 'find-alternate-file
  "e" '(:ignore t :wk "emacs")
  "eI" '(e:file/find-early-init-file :wk "early-init.el")
  "ed" '(e:file/find-config-file :wk "init.org")
  "ei" '(e:file/find-user-init-file :wk "init.el")
  "em" '(e:make-config :wk "Make config")
  "eu" '(e:file/find-utils-directory :wk "nsmacs-utils")
  "f" 'find-file
  "g" 'affe-grep
  "r" 'consult-recent-file
  "s" 'save-buffer
  "y" '(:ignore t :wk "yank")
  "yD" 'kllib:copy-project-directory-path
  "yY" 'kllib:copy-project-file-path
  "yb" 'kllib:copy-buffer-name
  "yd" 'kllib:copy-directory-path
  "yn" 'kllib:copy-file-name
  "yy" 'kllib:copy-file-path
  "z" 'affe-find)
#+end_src
*** [g] git/vc
#+begin_src emacs-lisp
(e:key-def git g
  "" '(:ignore t :wk "git")
  "L" 'magit-list-repositories
  "S" 'magit-stage-file
  "U" 'magit-unstage-file
  "f" '(:ignore t :wk "file")
  "fc" 'magit-file-checkout
  "fd" 'magit-diff
  "ff" 'magit-find-file
  "fl" 'magit-log-buffer-file
  "fm" 'magit-file-dispatch
  "m" 'magit-dispatch
  "n" 'consult-gh-notifications
  "o" 'browse-at-remote
  "s" 'magit-status
  "t" 'git-timemachine
  "v" '(:ignore t :wk "vc")
  "vh" 'vc-region-history)
#+end_src
*** [h] help
#+begin_src emacs-lisp
(e:key-def help h
  "" '(:ignore t :wk "help")
  "d" '(:ignore t :wk "describe")
  "dF" 'e:consult-faces
  "dK" 'describe-keymap
  "da" 'helm-apropos
  "dd" '(:ignore t :wk "devdocs")
  "ddd" 'devdocs-lookup
  "ddi" 'devdocs-install
  "ddl" 'devdocs-lookup
  "ddp" 'devdocs-peruse
  "ddq" 'devdocs-lookup
  "dds" 'devdocs-search
  "ddu" 'devdocs-update-all
  "df" 'describe-function
  "dK" 'find-function-on-key
  "db" 'describe-bindings
  "dk" 'describe-key
  "dm" 'describe-keymap
  "dv" 'describe-variable
  "h" '(:ignore t :wk "helpful")
  "hc" 'helpful-callable
  "hf" 'helpful-function
  "hh" 'helpful-at-point
  "hi" 'helpful-command
  "hk" 'helpful-key
  "hm" 'helpful-macro
  "hs" 'helpful-symbol
  "hv" 'helpful-variable)
#+end_src
*** [j] jump/join ⇔ split
#+begin_src emacs-lisp
(e:key-def jump j
  "" '(:ignore t :wk "jump")
  "d" 'dired-jump
  "i" 'consult-imenu
  "o" 'consult-outline)
#+end_src
*** [l] layout
#+begin_src emacs-lisp
(e:key-def layout l
  "" '(:ignore t :wk "layout")
  "1" '(e:tab-bar-select-tab-1 :wk "tab 1")
  "2" '(e:tab-bar-select-tab-2 :wk "tab 2")
  "3" '(e:tab-bar-select-tab-3 :wk "tab 3")
  "4" '(e:tab-bar-select-tab-4 :wk "tab 4")
  "5" '(e:tab-bar-select-tab-5 :wk "tab 5")
  "6" '(e:tab-bar-select-tab-6 :wk "tab 6")
  "7" '(e:tab-bar-select-tab-7 :wk "tab 7")
  "8" '(e:tab-bar-select-tab-8 :wk "tab 8")
  "9" '(e:tab-bar-select-tab-9 :wk "tab 9")
  "TAB" '(e:tab-switch-last :wk "last")
  "D" 'tab-close-other
  "c" 'tab-new
  "d" 'tab-close
  "l" 'tab-switch
  "n" 'tab-next
  "p" 'tab-previous
  "r" 'tab-rename)
#+end_src
*** [p] project
#+begin_src emacs-lisp
(e:key-def project p
  "" '(:ignore t :wk "project")
  "!" 'projectile-run-shell-command-in-root
  "%" 'projectile-replace-regexp
  "&" 'projectile-run-async-shell-command-in-root
  "D" 'projectile-dired
  "F" 'projectile-find-file-dwim
  "G" 'projectile-regenerate-tags
  "I" 'projectile-invalidate-cache
  "P" 'consult-projectile
  "R" 'projectile-replace
  "T" 'projectile-test-project
  "a" 'projectile-toggle-between-implementation-and-test
  "b" 'consult-projectile-switch-to-buffer
  "c" 'projectile-compile-project
  "d" 'consult-projectile-find-dir
  "e" 'projectile-edit-dir-locals
  "f" 'consult-projectile-find-file
  "g" 'projectile-find-tag
  "k" 'projectile-kill-buffers
  "p" 'consult-projectile-switch-project
  "r" 'consult-projectile-recentf
  "v" 'projectile-vc)
#+end_src
*** [q] quit
#+begin_src emacs-lisp
(e:key-def quit q
  "" '(:ignore t :wk "quit")
  "q" 'exit
  "r" 'restart-emacs)
#+end_src
*** [r] register/rings/resume
#+begin_src emacs-lisp
(e:key-def register r
  "" '(:ignore t :wk "register")
  "l" 'vertico-repeat)
#+end_src
*** [s] search/symbol
#+begin_src emacs-lisp
(e:key-def search s
  "" '(:ignore t :wk "search")
  "D" '(e:consult-ripgrep-cwd-dwim :wk "ripgrep(cwd+dwim)")
  "O" 'symbol-overlay-remove-all
  "S" '(e:consult-line-dwim :wk "consult-line(dwim)")
  "d" '(e:consult-ripgrep-cwd :wk "ripgrep(cwd)")
  "f" 'consult-fd
  "o" 'symbol-overlay-put
  "s" 'consult-line
  "t" 'consult-todo)
#+end_src
*** [t] toggle
#+begin_src emacs-lisp
(e:key-def toggle t
  "" '(:ignore t :wk "toggle")
  "d" 'toggle-debug-on-error
  "l" 'toggle-truncate-lines
  "t" 'consult-minor-mode-menu)
#+end_src
*** [w] window
#+begin_src emacs-lisp
(e:key-def window w
  "" '(:ignore t :wk "window")
  "-" 'split-window-below
  "/" 'split-window-right
  "1" 'delete-other-windows
  "=" 'balance-windows
  "D" 'ace-delete-window
  "H" 'evil-window-move-far-left
  "J" 'evil-window-move-very-bottom
  "K" 'evil-window-move-very-top
  "L" 'evil-window-move-far-right
  "M" 'ace-swap-window
  "U" 'winner-redo
  "W" 'ace-window
  "d" 'delete-window
  "h" 'evil-window-left
  "j" 'evil-window-down
  "k" 'evil-window-up
  "l" 'evil-window-right
  "u" 'winner-undo
  "w" 'other-window)
#+end_src
*** [x] text
#+begin_src emacs-lisp
(e:key-def text x
  "" '(:ignore t :wk "text")
  "A" 'link-hint-open-all-links
  "O" 'link-hint-open-link
  "c" 'count-words-region
  "d SPC" 'cycle-spacing
  "d" '(:ignore t :wk "delete")
  "dl" 'delete-blank-lines
  "du" 'delete-duplicate-lines
  "dw" 'delete-trailing-whitespace
  "g" '(:ignore t :wk "google/grugru")
  "gQ" 'google-translate-query-translate-reverse
  "gT" 'google-translate-at-point-reverse
  "gg" 'grugru
  "gq" 'google-translate-query-translate
  "gt" 'google-translate-at-point
  "i" '(:ignore t :wk "inflection")
  "i-" '(string-inflection-kebab-case :wk "kebab-case")
  "iC" '(string-inflection-camelcase :wk "CamelCase")
  "i_" '(string-inflection-underscore :wk "underscore")
  "ic" '(string-inflection-lower-camelcase :wk "camelCase")
  "ip" '(string-inflection-pluralize :wk "pluralize")
  "is" '(string-inflection-singularize :wk "singularize")
  "iu" '(string-inflection-upcase :wk "UPCASE")
  "l" '(:ignore t :wk "lines")
  "ls" 'sort-lines
  "m" 'link-hint-open-multiple-links
  "o" 'link-hint-open-link-at-point)
#+end_src
** global-map
#+begin_src emacs-lisp
(general-def global-map
  [remap undo-redo] 'undo-fu-only-redo
  [remap undo] 'undo-fu-only-undo
  [remap yank] 'consult-yank-replace
  "C-<return>" 'embark-act
  "C-*" '(e:org-popup-note :wk "memo.org")
  "C-:" '(e:org-popup-tasks :wk "tasks.org")
  "C-;" 'shell-pop
  "C-<" 'evil-jump-backward
  "C->" 'evil-jump-forward
  "C-^" 'ace-window)
#+end_src
** ctl-x-map
#+begin_src emacs-lisp
(general-def ctl-x-map
  "C-c" 'execute-extended-command)
#+end_src
** mode-specific-map
#+begin_src emacs-lisp
(general-def mode-specific-map
  "TAB" 'cape-codeium)
#+end_src
* 設定完了
** 完了処理
#+begin_src emacs-lisp
(add-hook 'emacs-startup-hook #'e:process-high-priority-config-queue)
(add-hook 'emacs-startup-hook #'e:process-low-priority-config-queue)
(setopt e:deferred-config-loaded t)
#+end_src
** 起動時間の計測
#+begin_src emacs-lisp
(when init-file-debug
  (eval-when-compile (require 'profiler))
  (profiler-report)
  (profiler-stop))
#+end_src
